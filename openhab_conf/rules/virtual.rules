import java.util.Random

var Timer t = null
var double lastHumidity = 50.0
var double lastTemperature = 20.0
var Timer autoOffTimer = null
val Random rnd = new Random()

rule "Update Lab virtual values every second"
when
    System started
then
    if (t === null) {
        t = createTimer(now, [ |
            // Вологість
            val double newHumidity = lastHumidity + (rnd.nextDouble() - 0.5) * 2
            LabHumidity.postUpdate(Math.max(0, Math.min(100, newHumidity)))
            lastHumidity = newHumidity

            // Температура
            val double newTemperature = lastTemperature + (rnd.nextDouble() - 0.5) * 0.5
            LabTemperature.postUpdate(Math.max(-20, Math.min(40, newTemperature)))
            lastTemperature = newTemperature

            t.reschedule(now.plusSeconds(1))
        ])
    }
end

rule "Температура > 30°C - логування"
when
    Item VirtualTemperature changed
then
    if (VirtualTemperature.state instanceof Number && (VirtualTemperature.state as Number) > 30) {
        logInfo("ALERT", "Температура перевищила 30°C: " + VirtualTemperature.state)
    }
end

rule "Lamp ON when motion detected and temperature < 20°C"
when
    Item LabMotion changed to ON
then
    val Number currentTemp = if (LabTemperatureJSON.state != NULL) (LabTemperatureJSON.state as Number) else (LabTemperature.state as Number)

    if (currentTemp != NULL && currentTemp < 20) {
        LabLampCmd.sendCommand(ON)
        logInfo("lab", "Лампа увімкнена через рух при низькій температурі")

        // Таймер на 30 секунд для вимкнення
        if (autoOffTimer !== null) {
            autoOffTimer.cancel()
            autoOffTimer = null
        }
        autoOffTimer = createTimer(now.plusSeconds(30)) [|
            if (LabMotion.state == OFF) {
                LabLampCmd.sendCommand(OFF)
                logInfo("lab", "Лампа вимкнена через 30 секунд без руху")
            }
        ]
    }
end